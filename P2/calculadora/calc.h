/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALC_H_RPCGEN
#define _CALC_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


typedef struct {
	u_int matriz_len;
	double *matriz_val;
} matriz;

struct calc_res {
	int errno;
	union {
		double result;
	} calc_res_u;
};
typedef struct calc_res calc_res;

struct suma_1_argument {
	double n1;
	double n2;
};
typedef struct suma_1_argument suma_1_argument;

struct producto_1_argument {
	double n1;
	double n2;
};
typedef struct producto_1_argument producto_1_argument;

struct resta_1_argument {
	double n1;
	double n2;
};
typedef struct resta_1_argument resta_1_argument;

struct division_1_argument {
	double n1;
	double n2;
};
typedef struct division_1_argument division_1_argument;

struct raiz_1_argument {
	double n1;
	double n2;
};
typedef struct raiz_1_argument raiz_1_argument;

struct potencia_1_argument {
	double n1;
	double n2;
};
typedef struct potencia_1_argument potencia_1_argument;

#define CALCULADORA 0x20000155
#define BASIC_CALC2 1

#if defined(__STDC__) || defined(__cplusplus)
#define suma 1
extern  calc_res * suma_1(double , double , CLIENT *);
extern  calc_res * suma_1_svc(double , double , struct svc_req *);
#define producto 2
extern  calc_res * producto_1(double , double , CLIENT *);
extern  calc_res * producto_1_svc(double , double , struct svc_req *);
#define resta 3
extern  calc_res * resta_1(double , double , CLIENT *);
extern  calc_res * resta_1_svc(double , double , struct svc_req *);
#define division 4
extern  calc_res * division_1(double , double , CLIENT *);
extern  calc_res * division_1_svc(double , double , struct svc_req *);
#define raiz 5
extern  calc_res * raiz_1(double , double , CLIENT *);
extern  calc_res * raiz_1_svc(double , double , struct svc_req *);
#define potencia 6
extern  calc_res * potencia_1(double , double , CLIENT *);
extern  calc_res * potencia_1_svc(double , double , struct svc_req *);
extern int calculadora_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define suma 1
extern  calc_res * suma_1();
extern  calc_res * suma_1_svc();
#define producto 2
extern  calc_res * producto_1();
extern  calc_res * producto_1_svc();
#define resta 3
extern  calc_res * resta_1();
extern  calc_res * resta_1_svc();
#define division 4
extern  calc_res * division_1();
extern  calc_res * division_1_svc();
#define raiz 5
extern  calc_res * raiz_1();
extern  calc_res * raiz_1_svc();
#define potencia 6
extern  calc_res * potencia_1();
extern  calc_res * potencia_1_svc();
extern int calculadora_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_matriz (XDR *, matriz*);
extern  bool_t xdr_calc_res (XDR *, calc_res*);
extern  bool_t xdr_suma_1_argument (XDR *, suma_1_argument*);
extern  bool_t xdr_producto_1_argument (XDR *, producto_1_argument*);
extern  bool_t xdr_resta_1_argument (XDR *, resta_1_argument*);
extern  bool_t xdr_division_1_argument (XDR *, division_1_argument*);
extern  bool_t xdr_raiz_1_argument (XDR *, raiz_1_argument*);
extern  bool_t xdr_potencia_1_argument (XDR *, potencia_1_argument*);

#else /* K&R C */
extern bool_t xdr_matriz ();
extern bool_t xdr_calc_res ();
extern bool_t xdr_suma_1_argument ();
extern bool_t xdr_producto_1_argument ();
extern bool_t xdr_resta_1_argument ();
extern bool_t xdr_division_1_argument ();
extern bool_t xdr_raiz_1_argument ();
extern bool_t xdr_potencia_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALC_H_RPCGEN */
