#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from calculadora import Calculadora
from calculadora.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void ping()')
    print('  double suma(double num1, double num2)')
    print('  double resta(double num1, double num2)')
    print('  double producto(double num1, double num2)')
    print('  i32 modulo(i32 num1, i32 num2)')
    print('  double division(double num1, double num2)')
    print('  double potencia(double num1, double num2)')
    print('   sumaMatrices( m1,  m2)')
    print('   restaMatrices( m1,  m2)')
    print('   productoMatrices( m1,  m2)')
    print('   traspuesta( m1)')
    print('  i32 determinante( m1)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Calculadora.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'suma':
    if len(args) != 2:
        print('suma requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma(eval(args[0]), eval(args[1]),))

elif cmd == 'resta':
    if len(args) != 2:
        print('resta requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta(eval(args[0]), eval(args[1]),))

elif cmd == 'producto':
    if len(args) != 2:
        print('producto requires 2 args')
        sys.exit(1)
    pp.pprint(client.producto(eval(args[0]), eval(args[1]),))

elif cmd == 'modulo':
    if len(args) != 2:
        print('modulo requires 2 args')
        sys.exit(1)
    pp.pprint(client.modulo(eval(args[0]), eval(args[1]),))

elif cmd == 'division':
    if len(args) != 2:
        print('division requires 2 args')
        sys.exit(1)
    pp.pprint(client.division(eval(args[0]), eval(args[1]),))

elif cmd == 'potencia':
    if len(args) != 2:
        print('potencia requires 2 args')
        sys.exit(1)
    pp.pprint(client.potencia(eval(args[0]), eval(args[1]),))

elif cmd == 'sumaMatrices':
    if len(args) != 2:
        print('sumaMatrices requires 2 args')
        sys.exit(1)
    pp.pprint(client.sumaMatrices(eval(args[0]), eval(args[1]),))

elif cmd == 'restaMatrices':
    if len(args) != 2:
        print('restaMatrices requires 2 args')
        sys.exit(1)
    pp.pprint(client.restaMatrices(eval(args[0]), eval(args[1]),))

elif cmd == 'productoMatrices':
    if len(args) != 2:
        print('productoMatrices requires 2 args')
        sys.exit(1)
    pp.pprint(client.productoMatrices(eval(args[0]), eval(args[1]),))

elif cmd == 'traspuesta':
    if len(args) != 1:
        print('traspuesta requires 1 args')
        sys.exit(1)
    pp.pprint(client.traspuesta(eval(args[0]),))

elif cmd == 'determinante':
    if len(args) != 1:
        print('determinante requires 1 args')
        sys.exit(1)
    pp.pprint(client.determinante(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
